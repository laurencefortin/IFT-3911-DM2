/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Microwave implements IStatemachine, ITimed {
	public enum State {
		MICRO_ONDE_MAIN_PUISSANCE,
		MICRO_ONDE_MAIN_PUISSANCE_R1_INIT_PUISSANCE,
		MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_LOW,
		MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_HIGH,
		MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_FERMEE,
		MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_OUVERTE,
		MICRO_ONDE_MAIN_TIMER,
		MICRO_ONDE_MAIN_TIMER_R2_INIT_TIMER,
		MICRO_ONDE_MAIN_TIMER_R2_TIMER_READY,
		MICRO_ONDE_MAIN_TIMER_R2__1_DIGIT,
		MICRO_ONDE_MAIN_TIMER_R2__2_DIGIT,
		MICRO_ONDE_MAIN_TIMER_R2__3_DIGIT,
		MICRO_ONDE_MAIN_TIMER_R2__4_DIGIT,
		MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_FERMEE,
		MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_OUVERTE,
		MICRO_ONDE_MAIN_CUISSON,
		MICRO_ONDE_MAIN_CUISSON_R3_INIT_CUISSON,
		MICRO_ONDE_MAIN_CUISSON_R3_CUISSON_ON_GOING,
		MICRO_ONDE_MAIN_CUISSON_R3_STILL_TIME,
		MICRO_ONDE_MAIN_CUISSON_R3_NO_TIME,
		MICRO_ONDE_MAIN_CUISSON_R3_BEEP_ON,
		MICRO_ONDE_MAIN_CUISSON_R3_PORTE_OUVERTE,
		MICRO_ONDE_MAIN_CUISSON_R3_PORTE_FERMEE,
		MICRO_ONDE_MAIN_CUISSON_R3__FINAL_,
		MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_FERMEE,
		MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_OUVERTE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
			
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean timerready;
	private boolean powerrdy;
	private long temp;
	
	protected long getTemp() {
		return temp;
	}
	
	protected void setTemp(long value) {
		this.temp = value;
	}
	
	
	private long count;
	
	protected long getCount() {
		return count;
	}
	
	protected void setCount(long value) {
		this.count = value;
	}
	
	
	private boolean doorOpen;
	
	protected boolean getDoorOpen() {
		return doorOpen;
	}
	
	protected void setDoorOpen(boolean value) {
		this.doorOpen = value;
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Microwave() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		setPower(0);
		
		setTemp(0);
		
		setCount(5);
		
		setDoorOpen(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_Micro_onde_main_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_Micro_onde_main();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		high = false;
		low = false;
		digit = false;
		timer = false;
		start = false;
		stop = false;
		open = false;
		close = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void clearInternalEvents() {
		timerready = false;
		powerrdy = false;
	}
	
	private void microStep() {
		long transitioned = -1;
		
		stateConfVectorPosition = 0;
		switch (stateVector[0]) {
		case MICRO_ONDE_MAIN_PUISSANCE_R1_INIT_PUISSANCE:
			transitioned = micro_onde_main_Puissance_r1_Init_Puissance_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_LOW:
			transitioned = micro_onde_main_Puissance_r1_Puissance_Low_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_HIGH:
			transitioned = micro_onde_main_Puissance_r1_Puissance_High_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_TIMER_R2_INIT_TIMER:
			transitioned = micro_onde_main_Timer_r2_Init_Timer_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_TIMER_R2_TIMER_READY:
			transitioned = micro_onde_main_Timer_r2_Timer_Ready_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__1_DIGIT:
			transitioned = micro_onde_main_Timer_r2__1_digit_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__2_DIGIT:
			transitioned = micro_onde_main_Timer_r2__2_digit_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__3_DIGIT:
			transitioned = micro_onde_main_Timer_r2__3_digit_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__4_DIGIT:
			transitioned = micro_onde_main_Timer_r2__4_digit_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_INIT_CUISSON:
			transitioned = micro_onde_main_Cuisson_r3_Init_Cuisson_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_CUISSON_ON_GOING:
			transitioned = micro_onde_main_Cuisson_r3_Cuisson_on_going_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_STILL_TIME:
			transitioned = micro_onde_main_Cuisson_r3_still_time_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_NO_TIME:
			transitioned = micro_onde_main_Cuisson_r3_No_time_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_BEEP_ON:
			transitioned = micro_onde_main_Cuisson_r3_Beep_on_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_PORTE_OUVERTE:
			transitioned = micro_onde_main_Cuisson_r3_Porte_ouverte_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_PORTE_FERMEE:
			transitioned = micro_onde_main_Cuisson_r3_Porte_fermee_react(transitioned);
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3__FINAL_:
			transitioned = micro_onde_main_Cuisson_r3__final__react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1) {
			switch (stateVector[1]) {
			case MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_FERMEE:
				transitioned = micro_onde_main_Puissance_porte_Porte_Fermee_react(transitioned);
				break;
			case MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_OUVERTE:
				transitioned = micro_onde_main_Puissance_porte_Porte_Ouverte_react(transitioned);
				break;
			case MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_FERMEE:
				transitioned = micro_onde_main_Timer_porte_Porte_Fermee_react(transitioned);
				break;
			case MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_OUVERTE:
				transitioned = micro_onde_main_Timer_porte_Porte_Ouverte_react(transitioned);
				break;
			case MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_FERMEE:
				transitioned = micro_onde_main_Cuisson_Porte_Porte_Fermee_react(transitioned);
				break;
			case MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_OUVERTE:
				transitioned = micro_onde_main_Cuisson_Porte_Porte_Ouverte_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			clearInternalEvents();
			nextEvent();
		} while ((((((((((((high || low) || digit) || timer) || start) || stop) || open) || close) || timerready) || powerrdy) || timeEvents[0]) || timeEvents[1]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MICRO_ONDE_MAIN_PUISSANCE:
			return stateVector[0].ordinal() >= State.
					MICRO_ONDE_MAIN_PUISSANCE.ordinal()&& stateVector[0].ordinal() <= State.MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_OUVERTE.ordinal();
		case MICRO_ONDE_MAIN_PUISSANCE_R1_INIT_PUISSANCE:
			return stateVector[0] == State.MICRO_ONDE_MAIN_PUISSANCE_R1_INIT_PUISSANCE;
		case MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_LOW:
			return stateVector[0] == State.MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_LOW;
		case MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_HIGH:
			return stateVector[0] == State.MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_HIGH;
		case MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_FERMEE:
			return stateVector[1] == State.MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_FERMEE;
		case MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_OUVERTE:
			return stateVector[1] == State.MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_OUVERTE;
		case MICRO_ONDE_MAIN_TIMER:
			return stateVector[0].ordinal() >= State.
					MICRO_ONDE_MAIN_TIMER.ordinal()&& stateVector[0].ordinal() <= State.MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_OUVERTE.ordinal();
		case MICRO_ONDE_MAIN_TIMER_R2_INIT_TIMER:
			return stateVector[0] == State.MICRO_ONDE_MAIN_TIMER_R2_INIT_TIMER;
		case MICRO_ONDE_MAIN_TIMER_R2_TIMER_READY:
			return stateVector[0] == State.MICRO_ONDE_MAIN_TIMER_R2_TIMER_READY;
		case MICRO_ONDE_MAIN_TIMER_R2__1_DIGIT:
			return stateVector[0] == State.MICRO_ONDE_MAIN_TIMER_R2__1_DIGIT;
		case MICRO_ONDE_MAIN_TIMER_R2__2_DIGIT:
			return stateVector[0] == State.MICRO_ONDE_MAIN_TIMER_R2__2_DIGIT;
		case MICRO_ONDE_MAIN_TIMER_R2__3_DIGIT:
			return stateVector[0] == State.MICRO_ONDE_MAIN_TIMER_R2__3_DIGIT;
		case MICRO_ONDE_MAIN_TIMER_R2__4_DIGIT:
			return stateVector[0] == State.MICRO_ONDE_MAIN_TIMER_R2__4_DIGIT;
		case MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_FERMEE:
			return stateVector[1] == State.MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_FERMEE;
		case MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_OUVERTE:
			return stateVector[1] == State.MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_OUVERTE;
		case MICRO_ONDE_MAIN_CUISSON:
			return stateVector[0].ordinal() >= State.
					MICRO_ONDE_MAIN_CUISSON.ordinal()&& stateVector[0].ordinal() <= State.MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_OUVERTE.ordinal();
		case MICRO_ONDE_MAIN_CUISSON_R3_INIT_CUISSON:
			return stateVector[0] == State.MICRO_ONDE_MAIN_CUISSON_R3_INIT_CUISSON;
		case MICRO_ONDE_MAIN_CUISSON_R3_CUISSON_ON_GOING:
			return stateVector[0] == State.MICRO_ONDE_MAIN_CUISSON_R3_CUISSON_ON_GOING;
		case MICRO_ONDE_MAIN_CUISSON_R3_STILL_TIME:
			return stateVector[0] == State.MICRO_ONDE_MAIN_CUISSON_R3_STILL_TIME;
		case MICRO_ONDE_MAIN_CUISSON_R3_NO_TIME:
			return stateVector[0] == State.MICRO_ONDE_MAIN_CUISSON_R3_NO_TIME;
		case MICRO_ONDE_MAIN_CUISSON_R3_BEEP_ON:
			return stateVector[0] == State.MICRO_ONDE_MAIN_CUISSON_R3_BEEP_ON;
		case MICRO_ONDE_MAIN_CUISSON_R3_PORTE_OUVERTE:
			return stateVector[0] == State.MICRO_ONDE_MAIN_CUISSON_R3_PORTE_OUVERTE;
		case MICRO_ONDE_MAIN_CUISSON_R3_PORTE_FERMEE:
			return stateVector[0] == State.MICRO_ONDE_MAIN_CUISSON_R3_PORTE_FERMEE;
		case MICRO_ONDE_MAIN_CUISSON_R3__FINAL_:
			return stateVector[0] == State.MICRO_ONDE_MAIN_CUISSON_R3__FINAL_;
		case MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_FERMEE:
			return stateVector[1] == State.MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_FERMEE;
		case MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_OUVERTE:
			return stateVector[1] == State.MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_OUVERTE;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	protected void raiseTimerready() {
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				timerready = true;
			}
		});
	}
	
	protected void raisePowerrdy() {
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				powerrdy = true;
			}
		});
	}
	
	public interface OperationCallback {
	
		public void displayTime(long t);
		
		public void display(String msg);
		
		public void clearDisplay();
		
		public void cook();
		
		public void stopCook();
		
		public void beepOn();
		
		public void beepOff();
		
		public void closeDoor();
		
		public void openDoor();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean high;
	
	
	public void raiseHigh() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				high = true;
			}
		});
		runCycle();
	}
	
	private boolean low;
	
	
	public void raiseLow() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				low = true;
			}
		});
		runCycle();
	}
	
	private boolean digit;
	
	private long digitValue;
	
	
	public void raiseDigit(final long value) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				digitValue = value;
				digit = true;
			}
		});
		runCycle();
	}
	protected long getDigitValue() {
		if (! digit ) 
			throw new IllegalStateException("Illegal event value access. Event Digit is not raised!");
		return digitValue;
	}
	
	private boolean timer;
	
	
	public void raiseTimer() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timer = true;
			}
		});
		runCycle();
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				start = true;
			}
		});
		runCycle();
	}
	
	private boolean stop;
	
	
	public void raiseStop() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				stop = true;
			}
		});
		runCycle();
	}
	
	private boolean open;
	
	
	public void raiseOpen() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				open = true;
			}
		});
		runCycle();
	}
	
	private boolean close;
	
	
	public void raiseClose() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				close = true;
			}
		});
		runCycle();
	}
	
	private long power;
	
	public long getPower() {
		return power;
	}
	
	public void setPower(long value) {
		this.power = value;
	}
	
	private boolean check_Micro_onde_main_Cuisson_r3__choice_0_tr0_tr0() {
		return getTemp()>0;
	}
	
	private boolean check_Micro_onde_main_Cuisson_r3__choice_0_tr1_tr1() {
		return getTemp()==0;
	}
	
	private boolean check_Micro_onde_main_Cuisson_r3__choice_1_tr0_tr0() {
		return getCount()>0;
	}
	
	private boolean check_Micro_onde_main_Cuisson_r3__choice_1_tr1_tr1() {
		return getCount()==0;
	}
	
	private boolean check_Micro_onde_main_Cuisson_r3__choice_2_tr0_tr0() {
		return getDoorOpen()==true;
	}
	
	private boolean check_Micro_onde_main_Cuisson_r3__choice_2_tr1_tr1() {
		return getDoorOpen()==false;
	}
	
	private void effect_Micro_onde_main_Cuisson_r3__choice_0_tr0() {
		enterSequence_Micro_onde_main_Cuisson_r3_still_time_default();
	}
	
	private void effect_Micro_onde_main_Cuisson_r3__choice_0_tr1() {
		enterSequence_Micro_onde_main_Cuisson_r3_No_time_default();
	}
	
	private void effect_Micro_onde_main_Cuisson_r3__choice_1_tr0() {
		enterSequence_Micro_onde_main_Cuisson_r3_Beep_on_default();
	}
	
	private void effect_Micro_onde_main_Cuisson_r3__choice_1_tr1() {
		enterSequence_Micro_onde_main_Cuisson_r3__final__default();
	}
	
	private void effect_Micro_onde_main_Cuisson_r3__choice_2_tr0() {
		enterSequence_Micro_onde_main_Cuisson_r3_Porte_ouverte_default();
	}
	
	private void effect_Micro_onde_main_Cuisson_r3__choice_2_tr1() {
		enterSequence_Micro_onde_main_Cuisson_r3_Cuisson_on_going_default();
	}
	
	/* Entry action for state 'Init Puissance'. */
	private void entryAction_Micro_onde_main_Puissance_r1_Init_Puissance() {
		operationCallback.clearDisplay();
	}
	
	/* Entry action for state 'Puissance Low'. */
	private void entryAction_Micro_onde_main_Puissance_r1_Puissance_Low() {
		operationCallback.display("Low");
	}
	
	/* Entry action for state 'Puissance High'. */
	private void entryAction_Micro_onde_main_Puissance_r1_Puissance_High() {
		operationCallback.display("High");
	}
	
	/* Entry action for state 'Porte Fermee'. */
	private void entryAction_Micro_onde_main_Puissance_porte_Porte_Fermee() {
		operationCallback.closeDoor();
		
		setDoorOpen(false);
	}
	
	/* Entry action for state 'Porte Ouverte'. */
	private void entryAction_Micro_onde_main_Puissance_porte_Porte_Ouverte() {
		operationCallback.openDoor();
		
		setDoorOpen(true);
	}
	
	/* Entry action for state 'Timer Ready'. */
	private void entryAction_Micro_onde_main_Timer_r2_Timer_Ready() {
		operationCallback.clearDisplay();
	}
	
	/* Entry action for state '1 digit'. */
	private void entryAction_Micro_onde_main_Timer_r2__1_digit() {
		operationCallback.displayTime(getDigitValue());
		
		setTemp(getDigitValue());
	}
	
	/* Entry action for state '2 digit'. */
	private void entryAction_Micro_onde_main_Timer_r2__2_digit() {
		setTemp((temp * 10));
		
		setTemp(getTemp() + (getDigitValue()));
		
		operationCallback.displayTime(getTemp());
	}
	
	/* Entry action for state '3 digit'. */
	private void entryAction_Micro_onde_main_Timer_r2__3_digit() {
		setTemp((temp * 10));
		
		setTemp(getTemp() + (getDigitValue()));
		
		operationCallback.displayTime(getTemp());
	}
	
	/* Entry action for state '4 digit'. */
	private void entryAction_Micro_onde_main_Timer_r2__4_digit() {
		setTemp((temp * 10));
		
		setTemp(getTemp() + (getDigitValue()));
		
		operationCallback.displayTime(getTemp());
	}
	
	/* Entry action for state 'Porte Fermee'. */
	private void entryAction_Micro_onde_main_Timer_porte_Porte_Fermee() {
		operationCallback.closeDoor();
		
		setDoorOpen(false);
	}
	
	/* Entry action for state 'Porte Ouverte'. */
	private void entryAction_Micro_onde_main_Timer_porte_Porte_Ouverte() {
		operationCallback.openDoor();
		
		setDoorOpen(true);
	}
	
	/* Entry action for state 'Cuisson on-going'. */
	private void entryAction_Micro_onde_main_Cuisson_r3_Cuisson_on_going() {
		timerService.setTimer(this, 0, (1 * 1000), false);
		
		operationCallback.displayTime(getTemp());
		
		operationCallback.cook();
	}
	
	/* Entry action for state 'still time'. */
	private void entryAction_Micro_onde_main_Cuisson_r3_still_time() {
		temp--;
	}
	
	/* Entry action for state 'No time'. */
	private void entryAction_Micro_onde_main_Cuisson_r3_No_time() {
		operationCallback.display("Finished");
	}
	
	/* Entry action for state 'Beep on'. */
	private void entryAction_Micro_onde_main_Cuisson_r3_Beep_on() {
		timerService.setTimer(this, 1, (1 * 1000), false);
		
		operationCallback.beepOn();
		
		operationCallback.beepOff();
		
		count--;
	}
	
	/* Entry action for state 'Porte ouverte'. */
	private void entryAction_Micro_onde_main_Cuisson_r3_Porte_ouverte() {
		operationCallback.display("Waiting");
		
		operationCallback.stopCook();
		
		operationCallback.openDoor();
	}
	
	/* Entry action for state 'Porte fermee'. */
	private void entryAction_Micro_onde_main_Cuisson_r3_Porte_fermee() {
		operationCallback.closeDoor();
		
		operationCallback.displayTime(getTemp());
	}
	
	/* Entry action for state 'Porte Fermee'. */
	private void entryAction_Micro_onde_main_Cuisson_Porte_Porte_Fermee() {
		operationCallback.closeDoor();
		
		setDoorOpen(false);
	}
	
	/* Entry action for state 'Porte Ouverte'. */
	private void entryAction_Micro_onde_main_Cuisson_Porte_Porte_Ouverte() {
		operationCallback.openDoor();
		
		setDoorOpen(true);
	}
	
	/* Exit action for state 'Cuisson on-going'. */
	private void exitAction_Micro_onde_main_Cuisson_r3_Cuisson_on_going() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Beep on'. */
	private void exitAction_Micro_onde_main_Cuisson_r3_Beep_on() {
		timerService.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Puissance */
	private void enterSequence_Micro_onde_main_Puissance_default() {
		enterSequence_Micro_onde_main_Puissance_r1_default();
		enterSequence_Micro_onde_main_Puissance_porte_default();
	}
	
	/* 'default' enter sequence for state Init Puissance */
	private void enterSequence_Micro_onde_main_Puissance_r1_Init_Puissance_default() {
		entryAction_Micro_onde_main_Puissance_r1_Init_Puissance();
		stateVector[0] = State.MICRO_ONDE_MAIN_PUISSANCE_R1_INIT_PUISSANCE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Puissance Low */
	private void enterSequence_Micro_onde_main_Puissance_r1_Puissance_Low_default() {
		entryAction_Micro_onde_main_Puissance_r1_Puissance_Low();
		stateVector[0] = State.MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_LOW;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Puissance High */
	private void enterSequence_Micro_onde_main_Puissance_r1_Puissance_High_default() {
		entryAction_Micro_onde_main_Puissance_r1_Puissance_High();
		stateVector[0] = State.MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_HIGH;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Porte Fermee */
	private void enterSequence_Micro_onde_main_Puissance_porte_Porte_Fermee_default() {
		entryAction_Micro_onde_main_Puissance_porte_Porte_Fermee();
		stateVector[1] = State.MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_FERMEE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Porte Ouverte */
	private void enterSequence_Micro_onde_main_Puissance_porte_Porte_Ouverte_default() {
		entryAction_Micro_onde_main_Puissance_porte_Porte_Ouverte();
		stateVector[1] = State.MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_OUVERTE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Timer */
	private void enterSequence_Micro_onde_main_Timer_default() {
		enterSequence_Micro_onde_main_Timer_r2_default();
		enterSequence_Micro_onde_main_Timer_porte_default();
	}
	
	/* 'default' enter sequence for state Init Timer */
	private void enterSequence_Micro_onde_main_Timer_r2_Init_Timer_default() {
		stateVector[0] = State.MICRO_ONDE_MAIN_TIMER_R2_INIT_TIMER;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Timer Ready */
	private void enterSequence_Micro_onde_main_Timer_r2_Timer_Ready_default() {
		entryAction_Micro_onde_main_Timer_r2_Timer_Ready();
		stateVector[0] = State.MICRO_ONDE_MAIN_TIMER_R2_TIMER_READY;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state 1 digit */
	private void enterSequence_Micro_onde_main_Timer_r2__1_digit_default() {
		entryAction_Micro_onde_main_Timer_r2__1_digit();
		stateVector[0] = State.MICRO_ONDE_MAIN_TIMER_R2__1_DIGIT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state 2 digit */
	private void enterSequence_Micro_onde_main_Timer_r2__2_digit_default() {
		entryAction_Micro_onde_main_Timer_r2__2_digit();
		stateVector[0] = State.MICRO_ONDE_MAIN_TIMER_R2__2_DIGIT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state 3 digit */
	private void enterSequence_Micro_onde_main_Timer_r2__3_digit_default() {
		entryAction_Micro_onde_main_Timer_r2__3_digit();
		stateVector[0] = State.MICRO_ONDE_MAIN_TIMER_R2__3_DIGIT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state 4 digit */
	private void enterSequence_Micro_onde_main_Timer_r2__4_digit_default() {
		entryAction_Micro_onde_main_Timer_r2__4_digit();
		stateVector[0] = State.MICRO_ONDE_MAIN_TIMER_R2__4_DIGIT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Porte Fermee */
	private void enterSequence_Micro_onde_main_Timer_porte_Porte_Fermee_default() {
		entryAction_Micro_onde_main_Timer_porte_Porte_Fermee();
		stateVector[1] = State.MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_FERMEE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Porte Ouverte */
	private void enterSequence_Micro_onde_main_Timer_porte_Porte_Ouverte_default() {
		entryAction_Micro_onde_main_Timer_porte_Porte_Ouverte();
		stateVector[1] = State.MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_OUVERTE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Cuisson */
	private void enterSequence_Micro_onde_main_Cuisson_default() {
		enterSequence_Micro_onde_main_Cuisson_r3_default();
		enterSequence_Micro_onde_main_Cuisson_Porte_default();
	}
	
	/* 'default' enter sequence for state Init Cuisson */
	private void enterSequence_Micro_onde_main_Cuisson_r3_Init_Cuisson_default() {
		stateVector[0] = State.MICRO_ONDE_MAIN_CUISSON_R3_INIT_CUISSON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Cuisson on-going */
	private void enterSequence_Micro_onde_main_Cuisson_r3_Cuisson_on_going_default() {
		entryAction_Micro_onde_main_Cuisson_r3_Cuisson_on_going();
		stateVector[0] = State.MICRO_ONDE_MAIN_CUISSON_R3_CUISSON_ON_GOING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state still time */
	private void enterSequence_Micro_onde_main_Cuisson_r3_still_time_default() {
		entryAction_Micro_onde_main_Cuisson_r3_still_time();
		stateVector[0] = State.MICRO_ONDE_MAIN_CUISSON_R3_STILL_TIME;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state No time */
	private void enterSequence_Micro_onde_main_Cuisson_r3_No_time_default() {
		entryAction_Micro_onde_main_Cuisson_r3_No_time();
		stateVector[0] = State.MICRO_ONDE_MAIN_CUISSON_R3_NO_TIME;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Beep on */
	private void enterSequence_Micro_onde_main_Cuisson_r3_Beep_on_default() {
		entryAction_Micro_onde_main_Cuisson_r3_Beep_on();
		stateVector[0] = State.MICRO_ONDE_MAIN_CUISSON_R3_BEEP_ON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Porte ouverte */
	private void enterSequence_Micro_onde_main_Cuisson_r3_Porte_ouverte_default() {
		entryAction_Micro_onde_main_Cuisson_r3_Porte_ouverte();
		stateVector[0] = State.MICRO_ONDE_MAIN_CUISSON_R3_PORTE_OUVERTE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Porte fermee */
	private void enterSequence_Micro_onde_main_Cuisson_r3_Porte_fermee_default() {
		entryAction_Micro_onde_main_Cuisson_r3_Porte_fermee();
		stateVector[0] = State.MICRO_ONDE_MAIN_CUISSON_R3_PORTE_FERMEE;
		stateConfVectorPosition = 0;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_Micro_onde_main_Cuisson_r3__final__default() {
		stateVector[0] = State.MICRO_ONDE_MAIN_CUISSON_R3__FINAL_;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Porte Fermee */
	private void enterSequence_Micro_onde_main_Cuisson_Porte_Porte_Fermee_default() {
		entryAction_Micro_onde_main_Cuisson_Porte_Porte_Fermee();
		stateVector[1] = State.MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_FERMEE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Porte Ouverte */
	private void enterSequence_Micro_onde_main_Cuisson_Porte_Porte_Ouverte_default() {
		entryAction_Micro_onde_main_Cuisson_Porte_Porte_Ouverte();
		stateVector[1] = State.MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_OUVERTE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region Micro onde main */
	private void enterSequence_Micro_onde_main_default() {
		react_Micro_onde_main__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Micro_onde_main_Puissance_r1_default() {
		react_Micro_onde_main_Puissance_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region porte */
	private void enterSequence_Micro_onde_main_Puissance_porte_default() {
		react_Micro_onde_main_Puissance_porte__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_Micro_onde_main_Timer_r2_default() {
		react_Micro_onde_main_Timer_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region porte */
	private void enterSequence_Micro_onde_main_Timer_porte_default() {
		react_Micro_onde_main_Timer_porte__entry_Default();
	}
	
	/* 'default' enter sequence for region r3 */
	private void enterSequence_Micro_onde_main_Cuisson_r3_default() {
		react_Micro_onde_main_Cuisson_r3__entry_Default();
	}
	
	/* 'default' enter sequence for region Porte */
	private void enterSequence_Micro_onde_main_Cuisson_Porte_default() {
		react_Micro_onde_main_Cuisson_Porte__entry_Default();
	}
	
	/* Default exit sequence for state Puissance */
	private void exitSequence_Micro_onde_main_Puissance() {
		exitSequence_Micro_onde_main_Puissance_r1();
		exitSequence_Micro_onde_main_Puissance_porte();
	}
	
	/* Default exit sequence for state Init Puissance */
	private void exitSequence_Micro_onde_main_Puissance_r1_Init_Puissance() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Puissance Low */
	private void exitSequence_Micro_onde_main_Puissance_r1_Puissance_Low() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Puissance High */
	private void exitSequence_Micro_onde_main_Puissance_r1_Puissance_High() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Porte Fermee */
	private void exitSequence_Micro_onde_main_Puissance_porte_Porte_Fermee() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Porte Ouverte */
	private void exitSequence_Micro_onde_main_Puissance_porte_Porte_Ouverte() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Timer */
	private void exitSequence_Micro_onde_main_Timer() {
		exitSequence_Micro_onde_main_Timer_r2();
		exitSequence_Micro_onde_main_Timer_porte();
	}
	
	/* Default exit sequence for state Init Timer */
	private void exitSequence_Micro_onde_main_Timer_r2_Init_Timer() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Timer Ready */
	private void exitSequence_Micro_onde_main_Timer_r2_Timer_Ready() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state 1 digit */
	private void exitSequence_Micro_onde_main_Timer_r2__1_digit() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state 2 digit */
	private void exitSequence_Micro_onde_main_Timer_r2__2_digit() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state 3 digit */
	private void exitSequence_Micro_onde_main_Timer_r2__3_digit() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state 4 digit */
	private void exitSequence_Micro_onde_main_Timer_r2__4_digit() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Porte Fermee */
	private void exitSequence_Micro_onde_main_Timer_porte_Porte_Fermee() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Porte Ouverte */
	private void exitSequence_Micro_onde_main_Timer_porte_Porte_Ouverte() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Cuisson */
	private void exitSequence_Micro_onde_main_Cuisson() {
		exitSequence_Micro_onde_main_Cuisson_r3();
		exitSequence_Micro_onde_main_Cuisson_Porte();
	}
	
	/* Default exit sequence for state Init Cuisson */
	private void exitSequence_Micro_onde_main_Cuisson_r3_Init_Cuisson() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Cuisson on-going */
	private void exitSequence_Micro_onde_main_Cuisson_r3_Cuisson_on_going() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_Micro_onde_main_Cuisson_r3_Cuisson_on_going();
	}
	
	/* Default exit sequence for state still time */
	private void exitSequence_Micro_onde_main_Cuisson_r3_still_time() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state No time */
	private void exitSequence_Micro_onde_main_Cuisson_r3_No_time() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Beep on */
	private void exitSequence_Micro_onde_main_Cuisson_r3_Beep_on() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_Micro_onde_main_Cuisson_r3_Beep_on();
	}
	
	/* Default exit sequence for state Porte ouverte */
	private void exitSequence_Micro_onde_main_Cuisson_r3_Porte_ouverte() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Porte fermee */
	private void exitSequence_Micro_onde_main_Cuisson_r3_Porte_fermee() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_Micro_onde_main_Cuisson_r3__final_() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Porte Fermee */
	private void exitSequence_Micro_onde_main_Cuisson_Porte_Porte_Fermee() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Porte Ouverte */
	private void exitSequence_Micro_onde_main_Cuisson_Porte_Porte_Ouverte() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region Micro onde main */
	private void exitSequence_Micro_onde_main() {
		switch (stateVector[0]) {
		case MICRO_ONDE_MAIN_PUISSANCE_R1_INIT_PUISSANCE:
			exitSequence_Micro_onde_main_Puissance_r1_Init_Puissance();
			break;
		case MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_LOW:
			exitSequence_Micro_onde_main_Puissance_r1_Puissance_Low();
			break;
		case MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_HIGH:
			exitSequence_Micro_onde_main_Puissance_r1_Puissance_High();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2_INIT_TIMER:
			exitSequence_Micro_onde_main_Timer_r2_Init_Timer();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2_TIMER_READY:
			exitSequence_Micro_onde_main_Timer_r2_Timer_Ready();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__1_DIGIT:
			exitSequence_Micro_onde_main_Timer_r2__1_digit();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__2_DIGIT:
			exitSequence_Micro_onde_main_Timer_r2__2_digit();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__3_DIGIT:
			exitSequence_Micro_onde_main_Timer_r2__3_digit();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__4_DIGIT:
			exitSequence_Micro_onde_main_Timer_r2__4_digit();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_INIT_CUISSON:
			exitSequence_Micro_onde_main_Cuisson_r3_Init_Cuisson();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_CUISSON_ON_GOING:
			exitSequence_Micro_onde_main_Cuisson_r3_Cuisson_on_going();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_STILL_TIME:
			exitSequence_Micro_onde_main_Cuisson_r3_still_time();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_NO_TIME:
			exitSequence_Micro_onde_main_Cuisson_r3_No_time();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_BEEP_ON:
			exitSequence_Micro_onde_main_Cuisson_r3_Beep_on();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_PORTE_OUVERTE:
			exitSequence_Micro_onde_main_Cuisson_r3_Porte_ouverte();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_PORTE_FERMEE:
			exitSequence_Micro_onde_main_Cuisson_r3_Porte_fermee();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3__FINAL_:
			exitSequence_Micro_onde_main_Cuisson_r3__final_();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_FERMEE:
			exitSequence_Micro_onde_main_Puissance_porte_Porte_Fermee();
			break;
		case MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_OUVERTE:
			exitSequence_Micro_onde_main_Puissance_porte_Porte_Ouverte();
			break;
		case MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_FERMEE:
			exitSequence_Micro_onde_main_Timer_porte_Porte_Fermee();
			break;
		case MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_OUVERTE:
			exitSequence_Micro_onde_main_Timer_porte_Porte_Ouverte();
			break;
		case MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_FERMEE:
			exitSequence_Micro_onde_main_Cuisson_Porte_Porte_Fermee();
			break;
		case MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_OUVERTE:
			exitSequence_Micro_onde_main_Cuisson_Porte_Porte_Ouverte();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Micro_onde_main_Puissance_r1() {
		switch (stateVector[0]) {
		case MICRO_ONDE_MAIN_PUISSANCE_R1_INIT_PUISSANCE:
			exitSequence_Micro_onde_main_Puissance_r1_Init_Puissance();
			break;
		case MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_LOW:
			exitSequence_Micro_onde_main_Puissance_r1_Puissance_Low();
			break;
		case MICRO_ONDE_MAIN_PUISSANCE_R1_PUISSANCE_HIGH:
			exitSequence_Micro_onde_main_Puissance_r1_Puissance_High();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region porte */
	private void exitSequence_Micro_onde_main_Puissance_porte() {
		switch (stateVector[1]) {
		case MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_FERMEE:
			exitSequence_Micro_onde_main_Puissance_porte_Porte_Fermee();
			break;
		case MICRO_ONDE_MAIN_PUISSANCE_PORTE_PORTE_OUVERTE:
			exitSequence_Micro_onde_main_Puissance_porte_Porte_Ouverte();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_Micro_onde_main_Timer_r2() {
		switch (stateVector[0]) {
		case MICRO_ONDE_MAIN_TIMER_R2_INIT_TIMER:
			exitSequence_Micro_onde_main_Timer_r2_Init_Timer();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2_TIMER_READY:
			exitSequence_Micro_onde_main_Timer_r2_Timer_Ready();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__1_DIGIT:
			exitSequence_Micro_onde_main_Timer_r2__1_digit();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__2_DIGIT:
			exitSequence_Micro_onde_main_Timer_r2__2_digit();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__3_DIGIT:
			exitSequence_Micro_onde_main_Timer_r2__3_digit();
			break;
		case MICRO_ONDE_MAIN_TIMER_R2__4_DIGIT:
			exitSequence_Micro_onde_main_Timer_r2__4_digit();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region porte */
	private void exitSequence_Micro_onde_main_Timer_porte() {
		switch (stateVector[1]) {
		case MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_FERMEE:
			exitSequence_Micro_onde_main_Timer_porte_Porte_Fermee();
			break;
		case MICRO_ONDE_MAIN_TIMER_PORTE_PORTE_OUVERTE:
			exitSequence_Micro_onde_main_Timer_porte_Porte_Ouverte();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r3 */
	private void exitSequence_Micro_onde_main_Cuisson_r3() {
		switch (stateVector[0]) {
		case MICRO_ONDE_MAIN_CUISSON_R3_INIT_CUISSON:
			exitSequence_Micro_onde_main_Cuisson_r3_Init_Cuisson();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_CUISSON_ON_GOING:
			exitSequence_Micro_onde_main_Cuisson_r3_Cuisson_on_going();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_STILL_TIME:
			exitSequence_Micro_onde_main_Cuisson_r3_still_time();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_NO_TIME:
			exitSequence_Micro_onde_main_Cuisson_r3_No_time();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_BEEP_ON:
			exitSequence_Micro_onde_main_Cuisson_r3_Beep_on();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_PORTE_OUVERTE:
			exitSequence_Micro_onde_main_Cuisson_r3_Porte_ouverte();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3_PORTE_FERMEE:
			exitSequence_Micro_onde_main_Cuisson_r3_Porte_fermee();
			break;
		case MICRO_ONDE_MAIN_CUISSON_R3__FINAL_:
			exitSequence_Micro_onde_main_Cuisson_r3__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Porte */
	private void exitSequence_Micro_onde_main_Cuisson_Porte() {
		switch (stateVector[1]) {
		case MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_FERMEE:
			exitSequence_Micro_onde_main_Cuisson_Porte_Porte_Fermee();
			break;
		case MICRO_ONDE_MAIN_CUISSON_PORTE_PORTE_OUVERTE:
			exitSequence_Micro_onde_main_Cuisson_Porte_Porte_Ouverte();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_Micro_onde_main_Cuisson_r3__choice_0() {
		if (check_Micro_onde_main_Cuisson_r3__choice_0_tr0_tr0()) {
			effect_Micro_onde_main_Cuisson_r3__choice_0_tr0();
		} else {
			if (check_Micro_onde_main_Cuisson_r3__choice_0_tr1_tr1()) {
				effect_Micro_onde_main_Cuisson_r3__choice_0_tr1();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_Micro_onde_main_Cuisson_r3__choice_1() {
		if (check_Micro_onde_main_Cuisson_r3__choice_1_tr0_tr0()) {
			effect_Micro_onde_main_Cuisson_r3__choice_1_tr0();
		} else {
			if (check_Micro_onde_main_Cuisson_r3__choice_1_tr1_tr1()) {
				effect_Micro_onde_main_Cuisson_r3__choice_1_tr1();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_Micro_onde_main_Cuisson_r3__choice_2() {
		if (check_Micro_onde_main_Cuisson_r3__choice_2_tr0_tr0()) {
			effect_Micro_onde_main_Cuisson_r3__choice_2_tr0();
		} else {
			if (check_Micro_onde_main_Cuisson_r3__choice_2_tr1_tr1()) {
				effect_Micro_onde_main_Cuisson_r3__choice_2_tr1();
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Micro_onde_main_Puissance_r1__entry_Default() {
		enterSequence_Micro_onde_main_Puissance_r1_Init_Puissance_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Micro_onde_main_Puissance_porte__entry_Default() {
		enterSequence_Micro_onde_main_Puissance_porte_Porte_Fermee_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Micro_onde_main_Timer_r2__entry_Default() {
		enterSequence_Micro_onde_main_Timer_r2_Init_Timer_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Micro_onde_main_Timer_porte__entry_Default() {
		enterSequence_Micro_onde_main_Timer_porte_Porte_Fermee_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Micro_onde_main__entry_Default() {
		enterSequence_Micro_onde_main_Puissance_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Micro_onde_main_Cuisson_r3__entry_Default() {
		enterSequence_Micro_onde_main_Cuisson_r3_Init_Cuisson_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Micro_onde_main_Cuisson_Porte__entry_Default() {
		enterSequence_Micro_onde_main_Cuisson_Porte_Porte_Fermee_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long micro_onde_main_Puissance_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		if (transitioned_after<0) {
			if (powerrdy) {
				exitSequence_Micro_onde_main_Puissance();
				enterSequence_Micro_onde_main_Timer_default();
				transitioned_after = 1;
			} else {
				if (stop) {
					exitSequence_Micro_onde_main_Puissance();
					react_Micro_onde_main__entry_Default();
					transitioned_after = 1;
				}
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Puissance_r1_Init_Puissance_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Puissance_react(transitioned_before);
		if (transitioned_after<0) {
			if (low) {
				exitSequence_Micro_onde_main_Puissance_r1_Init_Puissance();
				raisePowerrdy();
				
				enterSequence_Micro_onde_main_Puissance_r1_Puissance_Low_default();
				transitioned_after = 0;
			} else {
				if (high) {
					exitSequence_Micro_onde_main_Puissance_r1_Init_Puissance();
					raisePowerrdy();
					
					enterSequence_Micro_onde_main_Puissance_r1_Puissance_High_default();
					transitioned_after = 0;
				}
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Puissance_r1_Puissance_Low_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Puissance_react(transitioned_before);
		if (transitioned_after<0) {
			if (high) {
				exitSequence_Micro_onde_main_Puissance_r1_Puissance_Low();
				enterSequence_Micro_onde_main_Puissance_r1_Puissance_High_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Puissance_r1_Puissance_High_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Puissance_react(transitioned_before);
		if (transitioned_after<0) {
			if (low) {
				exitSequence_Micro_onde_main_Puissance_r1_Puissance_High();
				enterSequence_Micro_onde_main_Puissance_r1_Puissance_Low_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Puissance_porte_Porte_Fermee_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (open) {
				exitSequence_Micro_onde_main_Puissance_porte_Porte_Fermee();
				enterSequence_Micro_onde_main_Puissance_porte_Porte_Ouverte_default();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Puissance_porte_Porte_Ouverte_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (close) {
				exitSequence_Micro_onde_main_Puissance_porte_Porte_Ouverte();
				enterSequence_Micro_onde_main_Puissance_porte_Porte_Fermee_default();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Timer_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		if (transitioned_after<0) {
			if (timerready) {
				exitSequence_Micro_onde_main_Timer();
				enterSequence_Micro_onde_main_Cuisson_default();
				transitioned_after = 1;
			} else {
				if (stop) {
					exitSequence_Micro_onde_main_Timer();
					react_Micro_onde_main__entry_Default();
					transitioned_after = 1;
				}
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Timer_r2_Init_Timer_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Timer_react(transitioned_before);
		if (transitioned_after<0) {
			if (timer) {
				exitSequence_Micro_onde_main_Timer_r2_Init_Timer();
				enterSequence_Micro_onde_main_Timer_r2_Timer_Ready_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Timer_r2_Timer_Ready_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Timer_react(transitioned_before);
		if (transitioned_after<0) {
			if (digit) {
				exitSequence_Micro_onde_main_Timer_r2_Timer_Ready();
				raiseTimerready();
				
				enterSequence_Micro_onde_main_Timer_r2__1_digit_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Timer_r2__1_digit_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Timer_react(transitioned_before);
		if (transitioned_after<0) {
			if (digit) {
				exitSequence_Micro_onde_main_Timer_r2__1_digit();
				enterSequence_Micro_onde_main_Timer_r2__2_digit_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Timer_r2__2_digit_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Timer_react(transitioned_before);
		if (transitioned_after<0) {
			if (digit) {
				exitSequence_Micro_onde_main_Timer_r2__2_digit();
				enterSequence_Micro_onde_main_Timer_r2__3_digit_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Timer_r2__3_digit_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Timer_react(transitioned_before);
		if (transitioned_after<0) {
			if (digit) {
				exitSequence_Micro_onde_main_Timer_r2__3_digit();
				enterSequence_Micro_onde_main_Timer_r2__4_digit_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Timer_r2__4_digit_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Timer_react(transitioned_before);
		if (transitioned_after<0) {
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Timer_porte_Porte_Fermee_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (open) {
				exitSequence_Micro_onde_main_Timer_porte_Porte_Fermee();
				enterSequence_Micro_onde_main_Timer_porte_Porte_Ouverte_default();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Timer_porte_Porte_Ouverte_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (close) {
				exitSequence_Micro_onde_main_Timer_porte_Porte_Ouverte();
				enterSequence_Micro_onde_main_Timer_porte_Porte_Fermee_default();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		if (transitioned_after<0) {
			if (stop) {
				exitSequence_Micro_onde_main_Cuisson();
				react_Micro_onde_main__entry_Default();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_r3_Init_Cuisson_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Cuisson_react(transitioned_before);
		if (transitioned_after<0) {
			if (start) {
				exitSequence_Micro_onde_main_Cuisson_r3_Init_Cuisson();
				react_Micro_onde_main_Cuisson_r3__choice_2();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_r3_Cuisson_on_going_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Cuisson_react(transitioned_before);
		if (transitioned_after<0) {
			if (timeEvents[0]) {
				exitSequence_Micro_onde_main_Cuisson_r3_Cuisson_on_going();
				react_Micro_onde_main_Cuisson_r3__choice_0();
				transitioned_after = 0;
			} else {
				if (open) {
					exitSequence_Micro_onde_main_Cuisson_r3_Cuisson_on_going();
					enterSequence_Micro_onde_main_Cuisson_r3_Porte_ouverte_default();
					transitioned_after = 0;
				}
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_r3_still_time_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Cuisson_react(transitioned_before);
		if (transitioned_after<0) {
			if (open) {
				exitSequence_Micro_onde_main_Cuisson_r3_still_time();
				enterSequence_Micro_onde_main_Cuisson_r3_Porte_ouverte_default();
				transitioned_after = 0;
			} else {
				exitSequence_Micro_onde_main_Cuisson_r3_still_time();
				enterSequence_Micro_onde_main_Cuisson_r3_Cuisson_on_going_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_r3_No_time_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Cuisson_react(transitioned_before);
		if (transitioned_after<0) {
			exitSequence_Micro_onde_main_Cuisson_r3_No_time();
			enterSequence_Micro_onde_main_Cuisson_r3_Beep_on_default();
			transitioned_after = 0;
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_r3_Beep_on_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Cuisson_react(transitioned_before);
		if (transitioned_after<0) {
			if (timeEvents[1]) {
				exitSequence_Micro_onde_main_Cuisson_r3_Beep_on();
				react_Micro_onde_main_Cuisson_r3__choice_1();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_r3_Porte_ouverte_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Cuisson_react(transitioned_before);
		if (transitioned_after<0) {
			if (close) {
				exitSequence_Micro_onde_main_Cuisson_r3_Porte_ouverte();
				enterSequence_Micro_onde_main_Cuisson_r3_Porte_fermee_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_r3_Porte_fermee_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Cuisson_react(transitioned_before);
		if (transitioned_after<0) {
			exitSequence_Micro_onde_main_Cuisson_r3_Porte_fermee();
			enterSequence_Micro_onde_main_Cuisson_r3_Init_Cuisson_default();
			transitioned_after = 0;
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_r3__final__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = micro_onde_main_Cuisson_react(transitioned_before);
		if (transitioned_after<0) {
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_Porte_Porte_Fermee_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (open) {
				exitSequence_Micro_onde_main_Cuisson_Porte_Porte_Fermee();
				enterSequence_Micro_onde_main_Cuisson_Porte_Porte_Ouverte_default();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
	private long micro_onde_main_Cuisson_Porte_Porte_Ouverte_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (close) {
				exitSequence_Micro_onde_main_Cuisson_Porte_Porte_Ouverte();
				enterSequence_Micro_onde_main_Cuisson_Porte_Porte_Fermee_default();
				transitioned_after = 1;
			}
		}
		return transitioned_after;
	}
	
}
